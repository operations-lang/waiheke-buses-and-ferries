<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>Auckland Bus Tracker</title>
    <meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no' />
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css' rel='stylesheet' />
    <style>
        body { margin: 0; padding: 0; }
        #map { position: absolute; top: 0; bottom: 0; width: 100%; }
        /* This is the base style for all bus markers */
        .bus-marker {
            width: 24px;
            height: 24px;
            cursor: pointer;
            /* We will set the background-image dynamically in JavaScript */
        }
    </style>
</head>
<body>

<div id='map'></div>

<script>
    // 1. YOUR MAPBOX PUBLIC ACCESS TOKEN (PROVIDED)
    mapboxgl.accessToken = 'pk.eyJ1IjoiZXJpZGV3YWloZWtlIiwiYSI6ImNtZmJ5andpYjFmaTQya29pNzI5aXJieHEifQ.i41Fp5KnH3VetB36UsbcxQ';

    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [174.7645, -36.8485], // Auckland CBD
        zoom: 12
    });

    // 2. YOUR AUCKLAND TRANSPORT API KEY (PLACEHOLDER)
    const atApiKey = â€˜678049ee0ed8434d8133d7e91a486287';

    // 3. DEFINE THE BUS ROUTES AND THEIR COLORS HERE
    // Use the official route names as the key. The value can be a color name or a hex code.
    const routeColors = {
        '50A': 'blue',    // Or '#0000FF'
        '50B': 'green',   // Or '#008000'
        '501': 'yellow',  // Or '#FFFF00'
        '502': 'red'      // Or '#FF0000'
    };

    // This array will hold the routes we want to track, derived from the keys of the routeColors object.
    const desiredRoutes = Object.keys(routeColors);
    const markers = {};

    function getBusIcon(color) {
        // We use a simple SVG icon for the bus that can be colored dynamically
        const svg = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="${color}" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-bus"><rect x="1" y="5" width="22" height="14" rx="2" ry="2"></rect><path d="M7 19v-2"></path><path d="M17 19v-2"></path><path d="M5 19v-2"></path><path d="M19 19v-2"></path><path d="M10 5l3 14"></path><path d="M2 12h20"></path></svg>`;
        return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;
    }

    async function getBusLocations() {
        try {
            const response = await fetch(`https://api.at.govt.nz/v2/gtfs/vehiclepositions/bus`, {
                headers: {
                    'Ocp-Apim-Subscription-Key': atApiKey
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();
            const vehicles = data.response.entity;

            // Remove markers for buses that are no longer in the feed
            Object.keys(markers).forEach(vehicleId => {
                const vehicleExists = vehicles.some(v => v.id === vehicleId);
                if (!vehicleExists) {
                    markers[vehicleId].remove();
                    delete markers[vehicleId];
                }
            });

            vehicles.forEach(vehicle => {
                const routeId = vehicle.vehicle.trip.route_id;
                const position = vehicle.vehicle.position;
                
                // Only process the desired routes
                if (desiredRoutes.includes(routeId)) {
                    const color = routeColors[routeId] || 'black'; // Default to black if no color is defined
                    
                    if (markers[vehicle.id]) {
                        // Update existing marker's position
                        markers[vehicle.id].setLngLat([position.longitude, position.latitude]);
                    } else {
                        // Create a new marker
                        const el = document.createElement('div');
                        el.className = 'bus-marker';
                        el.style.backgroundImage = `url('${getBusIcon(color)}')`;
                        
                        markers[vehicle.id] = new mapboxgl.Marker(el)
                            .setLngLat([position.longitude, position.latitude])
                            .setPopup(new mapboxgl.Popup({ offset: 25 })
                            .setHTML(`<h3>Bus Route: ${routeId}</h3><p>Vehicle ID: ${vehicle.id}</p>`))
                            .addTo(map);
                    }
                }
            });

        } catch (error) {
            console.error("Error fetching bus locations:", error);
        }
    }

    // Call the function initially
    map.on('load', () => {
        getBusLocations();
        // Refresh the data every 30 seconds
        setInterval(getBusLocations, 30000);
    });

</script>

</body>
</html>
