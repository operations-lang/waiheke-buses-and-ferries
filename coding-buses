<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>Auckland Bus Tracker</title>
    <meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no' />
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css' rel='stylesheet' />
    <style>
        body { margin: 0; padding: 0; }
        #map { position: absolute; top: 0; bottom: 0; width: 100%; }
        .bus-marker {
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="%23FF5722" stroke="%23FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-bus"><rect x="1" y="5" width="22" height="14" rx="2" ry="2"></rect><path d="M7 19v-2"></path><path d="M17 19v-2"></path><path d="M5 19v-2"></path><path d="M19 19v-2"></path><path d="M10 5l3 14"></path><path d="M2 12h20"></path></svg>');
            background-size: cover;
            width: 24px;
            height: 24px;
            cursor: pointer;
        }
    </style>
</head>
<body>

<div id='map'></div>

<script>
    // 1. YOUR MAPBOX PUBLIC ACCESS TOKEN (PROVIDED)
    mapboxgl.accessToken = 'pk.eyJ1IjoiZXJpZGV3YWloZWtlIiwiYSI6ImNtZmJ5andpYjFmaTQya29pNzI5aXJieHEifQ.i41Fp5KnH3VetB36UsbcxQ';

    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [174.7645, -36.8485], // Auckland CBD
        zoom: 12
    });

    // 2. YOUR AUCKLAND TRANSPORT API KEY (PLACEHOLDER - GET THIS FROM THE AT DEVELOPER PORTAL)
    const atApiKey = 'YOUR_AT_API_KEY';

    // 3. ENTER THE BUS ROUTES YOU WANT TO TRACK (E.G., ['110', '129', '132'])
    const desiredRoutes = ['YOUR_BUS_ROUTES'];
    const markers = {}; // To store the Mapbox markers

    async function getBusLocations() {
        try {
            const response = await fetch(`https://api.at.govt.nz/v2/gtfs/vehiclepositions/bus`, {
                headers: {
                    'Ocp-Apim-Subscription-Key': atApiKey
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();
            const vehicles = data.response.entity;

            // Remove markers for buses that are no longer in the feed
            Object.keys(markers).forEach(vehicleId => {
                const vehicleExists = vehicles.some(v => v.id === vehicleId);
                if (!vehicleExists) {
                    markers[vehicleId].remove();
                    delete markers[vehicleId];
                }
            });

            vehicles.forEach(vehicle => {
                const routeId = vehicle.vehicle.trip.route_id;
                const position = vehicle.vehicle.position;
                
                // Only process the desired routes
                if (desiredRoutes.includes(routeId)) {
                    if (markers[vehicle.id]) {
                        // Update existing marker's position
                        markers[vehicle.id].setLngLat([position.longitude, position.latitude]);
                    } else {
                        // Create a new marker
                        const el = document.createElement('div');
                        el.className = 'bus-marker';
                        
                        markers[vehicle.id] = new mapboxgl.Marker(el)
                            .setLngLat([position.longitude, position.latitude])
                            .setPopup(new mapboxgl.Popup({ offset: 25 })
                            .setHTML(`<h3>Bus Route: ${routeId}</h3><p>Vehicle ID: ${vehicle.id}</p>`))
                            .addTo(map);
                    }
                }
            });

        } catch (error) {
            console.error("Error fetching bus locations:", error);
        }
    }

    // Call the function initially
    map.on('load', () => {
        getBusLocations();
        // Refresh the data every 30 seconds
        setInterval(getBusLocations, 30000);
    });

</script>

</body>
</html>
